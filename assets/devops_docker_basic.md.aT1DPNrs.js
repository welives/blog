import{_ as e,o as s,c as i,R as a}from"./chunks/framework.0ARc0mp4.js";const u=JSON.parse('{"title":"Docker基础","description":"Docker基础","frontmatter":{"title":"Docker基础","head":[["meta",{"name":"description","content":"Docker基础"}],["meta",{"name":"keywords","content":"docker 容器 镜像 基础"}]]},"headers":[],"relativePath":"devops/docker/basic.md","filePath":"devops/docker/basic.md","lastUpdated":1715270350000}'),l={name:"devops/docker/basic.md"},n=a(`<blockquote><p>如果在 Windows 上还没搭建好基础的 docker 运行环境的话，去这里看：<a href="/blog/misc/win10-dev-environment.html#enable-wsl">启用 Windows 的 WSL 功能</a>和<a href="/blog/misc/win10-dev-environment.html#install-docker">安装 Docker</a></p></blockquote><h2 id="docker是什么" tabindex="-1">docker是什么 <a class="header-anchor" href="#docker是什么" aria-label="Permalink to &quot;docker是什么&quot;">​</a></h2><p>Docker 是一个应用打包、分发、部署的工具</p><p>如果你是初次接触Docker的话可以把它理解为一个轻量的虚拟机，但也要记住它本质上并不是虚拟机。它只是虚拟出一个你的软件运行所需要的环境，多余的一点都不要；而通常的虚拟机则是一个完整而庞大的系统，包含各种你用得上或用不上的软件</p><h3 id="一些概念" tabindex="-1">一些概念 <a class="header-anchor" href="#一些概念" aria-label="Permalink to &quot;一些概念&quot;">​</a></h3><ul><li><code>image</code>：镜像是一个轻量级、可执行的独立软件包，它包括运行应用程序所需的一切：代码、运行时环境、库、环境变量和配置文件等</li><li><code>container</code>：容器是镜像的运行实例。当你运行镜像时，Docker 会在容器中启动一个进程，包括应用和其依赖，隔离于其他容器和主机系统</li><li><code>Dockerfile</code>：一个文本文件，它包含了一系列的命令和参数，这些命令被 Docker 用来自动构建镜像。简而言之，<code>Dockerfile</code>定义了创建 Docker 镜像所需的环境、文件添加、命令执行等步骤</li><li><code>docker-compose</code>：一个用于定义和运行多容器的 Docker 应用配置文件。可以简单理解为它是团队的Leader，负责团队成员(容器)之间的协同工作</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>它们之间的关系是，<code>通过Dockerfile构建出镜像，然后通过镜像来创建容器，程序就跑在容器中</code>。并且一个镜像可以随意创建多个容器，各个容器间相互隔离。多个容器之间可以根据<code>docker-compose</code>的指挥进行协同工作，构建出一个复杂完整的应用</p></div><h2 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h2><h3 id="常用指令" tabindex="-1">常用指令 <a class="header-anchor" href="#常用指令" aria-label="Permalink to &quot;常用指令&quot;">​</a></h3><ul><li><strong><code>FROM</code></strong>：指定基础镜像。所有<code>Dockerfile</code>都必须从一个基础镜像开始，这个镜像可以是官方的，也可以是自己创建的</li><li><strong><code>WORKDIR</code></strong>：设置工作目录。用于定义后续命令的执行环境路径</li><li><strong><code>COPY</code></strong>：复制文件。也就是将本地项目文件复制到镜像中</li><li><strong><code>ADD</code></strong>：更高级的复制文件。在<code>COPY</code>的基础上增加了自动解压文件和从 URL 下载文件的功能。官方推荐使用<code>COPY</code>，因为它语义更明确</li><li><strong><code>RUN</code></strong>：执行命令。在构建镜像阶段执行</li><li><strong><code>CMD</code></strong>：也是执行命令。在容器启动时执行</li><li><strong><code>EXPOSE</code></strong>：指示容器监听的端口</li><li><strong><code>ARG</code></strong>：设置环境变量。只在构建镜像阶段生效</li><li><strong><code>ENV</code></strong>：也是设置环境变量。构建镜像阶段和容器运行阶段都生效</li><li><strong><code>VOLUME</code></strong>：创建一个挂载点来持久化数据</li></ul><h2 id="docker快速安装软件" tabindex="-1">Docker快速安装软件 <a class="header-anchor" href="#docker快速安装软件" aria-label="Permalink to &quot;Docker快速安装软件&quot;">​</a></h2><p>在过去，我们上手一台新机器时总会需要到处下载各种软件来搭建开发环境或运行环境，这个过程比较繁琐，而Docker很好的解决的这一痛点</p><p><strong>直接安装的缺点</strong></p><ul><li>安装麻烦，可能有各种依赖，运行报错</li><li>可能对 Windows 并不友好，运行有各种兼容问题，软件只支持 Linux 上跑</li><li>不方便安装多版本软件，不能共存</li><li>不同系统和硬件，安装方式不一样</li><li>卸载不彻底，经常有各种残留的缓存文件</li></ul><p><strong>Docker 安装的优点</strong></p><ul><li>一个命令就可以安装好，快速方便</li><li>有大量的镜像，可直接使用</li><li>没有系统兼容问题，Linux 专享软件也照样跑</li><li>支持软件多版本共存</li><li>不同系统和硬件，只要安装好 Docker 其他都一样了，一个命令搞定所有</li><li>用完就删，没有残留</li></ul><h3 id="安装个nginx试试" tabindex="-1">安装个Nginx试试 <a class="header-anchor" href="#安装个nginx试试" aria-label="Permalink to &quot;安装个Nginx试试&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载一个镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用镜像启动一个容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里 -d 的意思是让容器后台运行，-p 的意思是进行端口转发，其中冒号左边的是宿主机要访问的端口，右边的是容器内部的端口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>好了，这样就得到了一个 Nginx 服务，是不是超级简单？接着来试试访问下 <code>127.0.0.1:8080</code>，在终端输入<code>curl 127.0.0.1:8080</code>，或者在浏览器中打开</p><h2 id="来做一个简单的helloworld镜像" tabindex="-1">来做一个简单的HelloWorld镜像 <a class="header-anchor" href="#来做一个简单的helloworld镜像" aria-label="Permalink to &quot;来做一个简单的HelloWorld镜像&quot;">​</a></h2><ol><li>在 WSL 中的任意目录下(<em>我这里是<code>/home</code></em>)新建一个<code>demo</code>目录，接着输入</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;console.log(&quot;hello world&quot;)&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>然后再创建一个<code>Dockerfile</code>文件，内容如下</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>简单解释一下这几个指令</p><ul><li><code>FROM node</code>：以最新版本的 node 镜像为基础进行构建</li><li><code>WORKDIR /demo</code>：设置容器启动后的默认工作目录</li><li><code>COPY . ./</code>：拷贝当前目录下的所有文件到工作目录，当然也可以使用<code>.dockerignore</code>来排除不需要打包的文件</li><li><code>CMD node index.js</code>：CMD 指令只能有一个，是容器启动后执行的命令，算是程序的入口</li></ul><ol><li>构建镜像，在<code>Dockerfile</code>文件所在目录下执行<code>docker image build -t demo .</code></li><li>构建完毕后运行容器<code>docker run demo</code></li></ol><p>最后就会在终端中看到输出的<code>hello world</code></p><blockquote><p>如果安装的是<code>Docker Desktop</code>，那么构建镜像并不一定非得在 WSL 中进行，也可以在宿主机中进行</p></blockquote>`,29),o=[n];function d(c,r,t,p,h,k){return s(),i("div",null,o)}const F=e(l,[["render",d]]);export{u as __pageData,F as default};
