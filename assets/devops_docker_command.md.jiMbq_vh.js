import{_ as s,o as i,c as a,R as e}from"./chunks/framework.0ARc0mp4.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"devops/docker/command.md","filePath":"devops/docker/command.md","lastUpdated":1715177349000}'),n={name:"devops/docker/command.md"},l=e(`<h2 id="查看版本" tabindex="-1">查看版本 <a class="header-anchor" href="#查看版本" aria-label="Permalink to &quot;查看版本&quot;">​</a></h2><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="镜像管理" tabindex="-1">镜像管理 <a class="header-anchor" href="#镜像管理" aria-label="Permalink to &quot;镜像管理&quot;">​</a></h2><h3 id="拉取镜像" tabindex="-1">拉取镜像 <a class="header-anchor" href="#拉取镜像" aria-label="Permalink to &quot;拉取镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] NAME[:TAG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@DIGEST]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：从远程仓库(默认是 Docker Hub)拉取指定名称的镜像到本地。如果不指定标签(<code>tag</code>)，默认会拉取<code>latest</code>标签的镜像</p><p><strong>实战示例</strong></p><p>拉取最新版本的 Nginx 镜像</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="搜索镜像" tabindex="-1">搜索镜像 <a class="header-anchor" href="#搜索镜像" aria-label="Permalink to &quot;搜索镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] TERM</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：在 Docker Hub 中搜索具有特定名称的镜像。这个命令非常有用，因为它可以帮助你快速找到需要的镜像</p><p><strong>实战示例</strong></p><p>搜索远程仓库中的 Nginx 镜像</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="查看本地镜像" tabindex="-1">查看本地镜像 <a class="header-anchor" href="#查看本地镜像" aria-label="Permalink to &quot;查看本地镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：列出本地所有已下载的 Docker 镜像。它显示的信息包括镜像的仓库名、标签、镜像 ID、创建时间和大小等</p><h3 id="删除镜像" tabindex="-1">删除镜像 <a class="header-anchor" href="#删除镜像" aria-label="Permalink to &quot;删除镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] IMAGE [IMAGE...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：删除本地存储的一个或多个 Docker 镜像。如果有容器正在使用该镜像，则需要先删除那些容器，或者使用<code>-f</code>参数强制删除</p><p><strong>实战示例</strong></p><p>删除本地的旧版 Ubuntu 镜像</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:18.04</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="构建镜像" tabindex="-1">构建镜像 <a class="header-anchor" href="#构建镜像" aria-label="Permalink to &quot;构建镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] PATH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：用于根据<code>Dockerfile</code>的指令创建 Docker 镜像。这个过程包括读取<code>Dockerfile</code>中的指令，然后按顺序执行这些指令来构建最终的镜像。每一个指令都可能创建一个新的层，这些层一起组成了整个镜像</p><p><strong>常用参数</strong></p><ol><li><p><strong><code>-t、--tag</code></strong>：为构建的镜像指定一个名字和标签，通常的格式为<code>name:tag</code></p><ul><li>示例：<code>docker build -t my-image:1.0 .</code></li></ul></li><li><p><strong><code>-f、--file</code></strong>：指定一个不在默认位置的<code>Dockerfile</code></p><ul><li>示例：<code>docker build -f /your_path/Dockerfile -t my-image .</code></li></ul></li><li><p><strong><code>--build-arg</code></strong>：允许你传递构建时的变量，这些变量在<code>Dockerfile</code>中可以被使用</p><ul><li>示例：<code>docker build --build-arg API_KEY=12345 -t my-image .</code></li></ul></li><li><p><strong><code>--no-cache</code></strong>：构建镜像时不使用任何缓存，这保证了所有的层都是新构建的</p><ul><li>示例：<code>docker build --no-cache -t my-image .</code></li></ul></li><li><p><strong><code>--rm</code></strong>：在镜像构建完成后自动删除中间产生的容器。这在大多数情况下会自动开启</p><ul><li>示例：<code>docker build --rm -t my-image .</code></li></ul></li><li><p><strong><code>--pull</code></strong>：在构建之前尝试拉取更新的基础镜像</p><ul><li>示例：<code>docker build --pull -t my-image .</code></li></ul></li><li><p><strong><code>-q、--quiet</code></strong>：构建过程中只显示必要信息，减少输出的干扰</p><ul><li>示例：<code>docker build -q -t my-image .</code></li></ul></li><li><p><strong><code>.</code></strong>：在 Docker 中<code>.</code>表示当前目录，意味着 Docker 将在当前目录中查找<code>Dockerfile</code>和所有<code>构建上下文</code></p><ul><li><strong>构建上下文</strong>：Docker 构建镜像时所需要的文件和文件夹</li></ul></li></ol><h4 id="实战示例" tabindex="-1">实战示例 <a class="header-anchor" href="#实战示例" aria-label="Permalink to &quot;实战示例&quot;">​</a></h4><ul><li>构建一个简单的 web 服务器镜像</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设当前目录有一个 Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-webserver:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>构建一个指定镜像版本的镜像</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设当前目录有一个 Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-webserver:1.0.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="容器管理" tabindex="-1">容器管理 <a class="header-anchor" href="#容器管理" aria-label="Permalink to &quot;容器管理&quot;">​</a></h2><h3 id="列出运行中的容器" tabindex="-1">列出运行中的容器 <a class="header-anchor" href="#列出运行中的容器" aria-label="Permalink to &quot;列出运行中的容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：显示所有当前运行中的容器实例的简要信息，包括容器 ID、创建时间、使用的镜像等</p><h3 id="列出所有容器" tabindex="-1">列出所有容器 <a class="header-anchor" href="#列出所有容器" aria-label="Permalink to &quot;列出所有容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：列出系统中所有的容器，包括运行中的和已停止的</p><h3 id="运行容器" tabindex="-1">运行容器 <a class="header-anchor" href="#运行容器" aria-label="Permalink to &quot;运行容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] IMAGE [COMMAND] [ARG...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：从指定的镜像启动一个新的容器实例。这是 Docker 中最常用的命令之一，它允许用户从一个镜像中创建并启动一个或多个容器</p><p><strong>选项示例</strong></p><ul><li><code>-d</code>：后台运行容器，是<code>--detach</code>的简写。运行成功的话会返回容器 ID</li><li><code>--name</code>：为容器指定一个名称，此处命名为<code>docker-nginx</code></li><li><code>-p</code>：端口映射，将容器的 80 端口映射到宿主机的 8080 端口</li></ul><p><strong>实战示例</strong></p><p>启动一个 Nginx 服务器，并且通过宿主机的 8080 端口来访问此 Nginx 服务器</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="在运行的容器中执行命令" tabindex="-1">在运行的容器中执行命令 <a class="header-anchor" href="#在运行的容器中执行命令" aria-label="Permalink to &quot;在运行的容器中执行命令&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER COMMAND [ARG...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：在已运行的容器内执行指定命令。这使得用户可以进入容器内部进行操作，如安装软件、修改配置文件或进行故障诊断</p><p><strong>实战示例</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> acca75d5d18a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>这个命令的意思是在指定的 Docker 容器中开启一个交互式<code>bash</code>终端，这使得你可以在容器的环境中手动执行更多命令，就像在一个常规的 Linux 终端中操作一样 <ul><li><code>-it</code>：这个参数组合有两部分。<code>-i</code> 代表“交互式”，让容器的标准输入保持开启。<code>-t</code> 代表分配一个伪终端</li><li><code>acca75d5d18a</code>：容器 ID，可以通过<code>docker ps</code>命令查看</li><li><code>/bin/bash</code>：要执行的命令，这里以<code>/bin/bash</code>为例，表示进入容器的终端</li></ul></li></ul><h3 id="停止容器" tabindex="-1">停止容器 <a class="header-anchor" href="#停止容器" aria-label="Permalink to &quot;停止容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：停止一个或多个运行中的容器</p><h3 id="启动已停止的容器" tabindex="-1">启动已停止的容器 <a class="header-anchor" href="#启动已停止的容器" aria-label="Permalink to &quot;启动已停止的容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：启动一个或多个之前已经创建并停止的容器</p><h3 id="重启容器" tabindex="-1">重启容器 <a class="header-anchor" href="#重启容器" aria-label="Permalink to &quot;重启容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：重启一个或多个容器，这对于需要重新加载配置或恢复服务的快速方法很有用</p><h3 id="删除容器" tabindex="-1">删除容器 <a class="header-anchor" href="#删除容器" aria-label="Permalink to &quot;删除容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：删除一个或多个已停止的容器。如果容器正在运行，需要先用<code>docker stop</code>停止它或使用<code>-f</code>选项强制删除</p><h3 id="暂停容器" tabindex="-1">暂停容器 <a class="header-anchor" href="#暂停容器" aria-label="Permalink to &quot;暂停容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pause</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CONTAINER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：暂停一个或多个容器中的所有进程</p><h3 id="恢复容器" tabindex="-1">恢复容器 <a class="header-anchor" href="#恢复容器" aria-label="Permalink to &quot;恢复容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unpause</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CONTAINER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：恢复被暂停的容器中的所有进程</p><h3 id="查看容器日志" tabindex="-1">查看容器日志 <a class="header-anchor" href="#查看容器日志" aria-label="Permalink to &quot;查看容器日志&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：获取容器的日志输出。对于调试容器应用或监控容器内部发生的事件非常有用</p><h3 id="把容器的文件拷贝出来" tabindex="-1">把容器的文件拷贝出来 <a class="header-anchor" href="#把容器的文件拷贝出来" aria-label="Permalink to &quot;把容器的文件拷贝出来&quot;">​</a></h3><p>要从 Docker 容器中拷贝文件到宿主机，你可以使用<code>docker cp</code>命令</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] CONTAINER:SRC_PATH DEST_PATH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>CONTAINER</code>：容器名或ID</li><li><code>SRC_PATH</code>：容器内文件或目录的路径，你想要从中拷贝的源数据</li><li><code>DEST_PATH</code>：宿主机上的目标路径，将文件或目录拷贝到这里</li></ul><p><strong>实战示例</strong></p><p>假设你想从一个ID为<code>86209c1694e6</code>的 Nginx 容器中拷贝其配置文件到宿主机的当前目录中，可以使用如下命令</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 86209</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c1694e6:/etc/nginx/nginx.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你想要从容器中拷贝某个目录，只需要指定目录的路径即可。例如，将容器中的<code>/var/log</code>目录拷贝到宿主机的<code>/home/user/logs</code>目录</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 86209</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c1694e6:/var/log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/logs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="网络管理" tabindex="-1">网络管理 <a class="header-anchor" href="#网络管理" aria-label="Permalink to &quot;网络管理&quot;">​</a></h2><h3 id="列出所有网络" tabindex="-1">列出所有网络 <a class="header-anchor" href="#列出所有网络" aria-label="Permalink to &quot;列出所有网络&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：列出 Docker 主机上的所有网络。Docker 支持不同类型的网络，如<code>bridge</code>、<code>host</code>和<code>none</code>等，默认情况下会创建一个<code>bridge</code>网络</p><h3 id="检查网络" tabindex="-1">检查网络 <a class="header-anchor" href="#检查网络" aria-label="Permalink to &quot;检查网络&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] NETWORK [NETWORK...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：显示一个或多个 Docker 网络的详细信息。这些信息包括网络的类型、所连接的容器、IP分配等，是理解网络配置和排查网络问题的重要工具</p><p><strong>实战示例</strong></p><p>查看默认<code>bridge</code>网络的详细信息</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bridge</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="创建网络" tabindex="-1">创建网络 <a class="header-anchor" href="#创建网络" aria-label="Permalink to &quot;创建网络&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] NETWORK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：创建一个新的 Docker 网络。你可以指定网络的类型(如<code>bridge</code>、<code>overlay</code>等)，也可以配置网络的参数(如子网、网关等)</p><p><strong>实战示例</strong></p><p>在需要隔离容器通信或跨主机容器通信时，往往需要创建自定义网络。例如，创建一个带有特定子网的<code>bridge</code>网络</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --driver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bridge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --subnet</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.1.0/24</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-bridge</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除网络" tabindex="-1">删除网络 <a class="header-anchor" href="#删除网络" aria-label="Permalink to &quot;删除网络&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NETWORK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [NETWORK...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：删除指定的一个或多个网络</p><h3 id="连接容器到网络" tabindex="-1">连接容器到网络 <a class="header-anchor" href="#连接容器到网络" aria-label="Permalink to &quot;连接容器到网络&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] NETWORK CONTAINER</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：将一个已经运行的容器连接到一个网络。这允许你动态地改变容器的网络配置，无需重启容器</p><h3 id="断开容器与网络的连接" tabindex="-1">断开容器与网络的连接 <a class="header-anchor" href="#断开容器与网络的连接" aria-label="Permalink to &quot;断开容器与网络的连接&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] NETWORK CONTAINER</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：将一个容器从一个网络中断开</p><h2 id="卷管理" tabindex="-1">卷管理 <a class="header-anchor" href="#卷管理" aria-label="Permalink to &quot;卷管理&quot;">​</a></h2><h3 id="列出卷" tabindex="-1">列出卷 <a class="header-anchor" href="#列出卷" aria-label="Permalink to &quot;列出卷&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：显示所有在 Docker 主机上创建的卷。这个命令允许你快速查看哪些卷是可用的，以及识别未再使用的卷</p><h3 id="创建卷" tabindex="-1">创建卷 <a class="header-anchor" href="#创建卷" aria-label="Permalink to &quot;创建卷&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] [VOLUME]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：创建一个新的卷，用于数据持久化或在多个容器间共享数据。Docker 卷存储在宿主机上，独立于容器的生命周期，即使容器被删除，卷中的数据也不会丢失</p><p><strong>实战示例</strong></p><p>当你准备启动一个数据库容器并希望数据库文件持久化时，首先创建一个卷，然后在运行容器时，将这个卷挂载到容器的数据目录</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dbdata</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除卷" tabindex="-1">删除卷 <a class="header-anchor" href="#删除卷" aria-label="Permalink to &quot;删除卷&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] VOLUME [VOLUME...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：删除指定的一个或多个卷。如果卷正被某个容器使用，则无法删除，除非使用强制删除选项</p><p><strong>实战示例</strong></p><p>清理未使用的卷以释放空间：首先确认卷不再被任何容器使用，然后删除它</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dbdata</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h2><p>Docker Compose 是一个用于定义和运行多容器的 Docker 应用程序的工具。通过一个<code>YAML</code>文件来配置应用服务，然后只需一个简单的命令，就可以创建并启动所有服务</p><h3 id="查看版本-1" tabindex="-1">查看版本 <a class="header-anchor" href="#查看版本-1" aria-label="Permalink to &quot;查看版本&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="构建服务并后台运行" tabindex="-1">构建服务并后台运行 <a class="header-anchor" href="#构建服务并后台运行" aria-label="Permalink to &quot;构建服务并后台运行&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：先构建服务所需的镜像，然后在后台启动服务。这个命令适用于开发环境，当你做了代码更改后，需要重新构建镜像并重启服务</p><ul><li><p><strong><code>--build</code></strong> 选项确保了即使之前构建过镜像，也会重新构建镜像，这对于确保使用的是最新代码和依赖非常有用</p></li><li><p><strong><code>-d</code></strong> 选项表示在后台运行容器</p></li></ul><h3 id="停止服务" tabindex="-1">停止服务 <a class="header-anchor" href="#停止服务" aria-label="Permalink to &quot;停止服务&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：启动由<code>docker-compose.yml</code>文件定义的所有服务，但前提是这些服务之前已被创建并停止</p><h3 id="重建并启动服务" tabindex="-1">重建并启动服务 <a class="header-anchor" href="#重建并启动服务" aria-label="Permalink to &quot;重建并启动服务&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：与<code>docker compose up --build -d</code>相似，但服务会在前台运行。如果服务已经运行，会先停止并移除现有的容器，然后根据最新的配置和代码构建镜像并启动服务</p><h3 id="停止并移除容器、网络、卷" tabindex="-1">停止并移除容器、网络、卷 <a class="header-anchor" href="#停止并移除容器、网络、卷" aria-label="Permalink to &quot;停止并移除容器、网络、卷&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：停止并移除由<code>docker-compose.yml</code>文件定义的所有服务的容器，以及网络和默认管理的卷。这条命令不会移除手动指定的外部卷</p><h2 id="清理资源" tabindex="-1">清理资源 <a class="header-anchor" href="#清理资源" aria-label="Permalink to &quot;清理资源&quot;">​</a></h2><p>对于日常的 Docker 使用，可能会产生大量的未使用或临时的容器、镜像、卷和网络。Docker 提供了方便的命令来清理这些资源，帮助维护 Docker 环境的整洁</p><h3 id="删除所有为none的镜像" tabindex="-1">删除所有为none的镜像 <a class="header-anchor" href="#删除所有为none的镜像" aria-label="Permalink to &quot;删除所有为none的镜像&quot;">​</a></h3><p>在 PowerShell中，删除 Docker 中标记为 <code>&lt;none&gt;</code> 的镜像，你可以使用以下命令</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Select-String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> none</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForEach-Object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($_.ToString() -split &#39;\\s+&#39;)[2] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 macOS 或者 Linux 中，你可以使用以下命令来删除 Docker 中标记为 <code>&lt;none&gt;</code> 的镜像</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;none&gt;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ print $3 }&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除所有停止的容器" tabindex="-1">删除所有停止的容器 <a class="header-anchor" href="#删除所有停止的容器" aria-label="Permalink to &quot;删除所有停止的容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除未使用的镜像" tabindex="-1">删除未使用的镜像 <a class="header-anchor" href="#删除未使用的镜像" aria-label="Permalink to &quot;删除未使用的镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除未使用的网络" tabindex="-1">删除未使用的网络 <a class="header-anchor" href="#删除未使用的网络" aria-label="Permalink to &quot;删除未使用的网络&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除未使用的卷" tabindex="-1">删除未使用的卷 <a class="header-anchor" href="#删除未使用的卷" aria-label="Permalink to &quot;删除未使用的卷&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="一键清理未使用的容器、网络、镜像、卷" tabindex="-1">一键清理未使用的容器、网络、镜像、卷 <a class="header-anchor" href="#一键清理未使用的容器、网络、镜像、卷" aria-label="Permalink to &quot;一键清理未使用的容器、网络、镜像、卷&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>作用</strong>：这个命令将清除所有未使用的容器、网络、悬挂的镜像（默认不清理卷）。如果你想要在清理过程中包括卷，可以添加<code>-a</code>和<code>--volumes</code>选项</p>`,161),t=[l];function h(p,r,d,o,k,c){return i(),a("div",null,t)}const b=s(n,[["render",h]]);export{u as __pageData,b as default};
