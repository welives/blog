import{_ as i,o as a,c as n,R as s,k as e}from"./chunks/framework.0ARc0mp4.js";const l="/blog/assets/消息队列.CQc4vZtV.png",t="/blog/assets/线程阻塞.yKblm4P4.png",p="/blog/assets/异步.DhLguZXV.png",F=JSON.parse('{"title":"事件循环","description":"事件循环","frontmatter":{"title":"事件循环","head":[["meta",{"name":"description","content":"事件循环"}],["meta",{"name":"keywords","content":"事件循环 浏览器 线程 渲染主线程 异步"}]]},"headers":[],"relativePath":"front-end/browser/eventloop.md","filePath":"front-end/browser/eventloop.md","lastUpdated":1711386344000}'),r={name:"front-end/browser/eventloop.md"},h=s('<h2 id="什么是进程" tabindex="-1">什么是进程？ <a class="header-anchor" href="#什么是进程" aria-label="Permalink to &quot;什么是进程？&quot;">​</a></h2><p>程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程</p><p>每个应用至少要有一个进程，进程与进程之间是相互独立的，即使要通信，也需要双方的同意</p><h2 id="什么是线程" tabindex="-1">什么是线程？ <a class="header-anchor" href="#什么是线程" aria-label="Permalink to &quot;什么是线程？&quot;">​</a></h2><p>有了进程后，就可以运行程序的代码了。打个比喻：运行代码的「<strong>人</strong>」称之为「<strong>线程</strong>」</p><p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。如果主线程结束了，那么程序也就结束运行了，分配的内存空间也就释放掉了</p><p>如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程</p><h2 id="浏览器有哪些进程和线程" tabindex="-1">浏览器有哪些进程和线程？ <a class="header-anchor" href="#浏览器有哪些进程和线程" aria-label="Permalink to &quot;浏览器有哪些进程和线程？&quot;">​</a></h2><p><strong>浏览器是一个多进程多线程的应用程序</strong></p><p>现代浏览器的内部工作是极其复杂的，堪比操作系统</p><p>为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程</p><div class="tip custom-block"><p class="custom-block-title">在前端开发中，需要重点关注的是</p><ol><li><p>「<strong>浏览器进程</strong>」</p><p>主要负责界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>「<strong>网络进程</strong>」</p><p>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</p></li><li><p>「<strong>渲染进程</strong>」</p><p>渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。</p></li></ol></div><h2 id="渲染主线程是如何工作的" tabindex="-1">渲染主线程是如何工作的？ <a class="header-anchor" href="#渲染主线程是如何工作的" aria-label="Permalink to &quot;渲染主线程是如何工作的？&quot;">​</a></h2><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把页面画 60 次</li><li>执行全局 JS 代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>......</li></ul><p>要处理这么多的任务，渲染主线程遇到了一个棘手的难题：如何调度任务？</p><p>比如：</p><ul><li>我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数吗？</li><li>我正在执行一个 JS 函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗？</li><li>浏览器进程通知我“用户点击了按钮”，与此同时，某个计时器也到达了时间，我该处理哪一个？</li><li>......</li></ul><p>渲染主线程为了解决这个问题，所采取的方案是：<strong>排队</strong></p><p><img src="'+l+`" alt="消息队列" loading="lazy" decoding="async"></p><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li></ol><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动渲染主线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessagePumpDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> delegate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  AutoReset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;bool&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> auto_reset_keep_running</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keep_running_, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BUILDFLAG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IS_APPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ScopedNSAutoreleasePool autorelease_pool;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 拿到下一个任务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Delegate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::NextWorkInfo next_work_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delegate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> has_more_immediate_work </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next_work_info.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keep_running_)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (has_more_immediate_work)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    has_more_immediate_work </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delegate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoIdleWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keep_running_)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (has_more_immediate_work)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (next_work_info.delayed_run_time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimedWait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(next_work_info.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remaining_delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ol start="2"><li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态</li><li>正在执行中的任务或其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li></ol><p>这样一来，就可以让每个任务有条不紊的、持续的进行下去了。</p><p><strong>整个过程，被称之为事件循环（消息循环）</strong></p><h2 id="什么是异步" tabindex="-1">什么是异步？ <a class="header-anchor" href="#什么是异步" aria-label="Permalink to &quot;什么是异步？&quot;">​</a></h2><p>代码在执行过程中，会遇到一些无法立即处理的任务，比如：</p><ul><li>计时完成后需要执行的任务：<code>setTimeout</code>、<code>setInterval</code></li><li>网络通信完成后需要执行的任务：<code>XHR</code>、<code>Fetch</code></li><li>用户操作后需要执行的任务：<code>addEventListener</code></li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「<strong>阻塞</strong>」的状态，从而导致浏览器「<strong>卡死</strong>」</p><p><img src="`+t+'" alt="线程阻塞" loading="lazy" decoding="async"></p><p><strong>渲染主线程承担着极其重要的工作，无论如何都不能阻塞！</strong> 因此，浏览器选择「<strong>异步</strong>」来解决这个问题</p><p><img src="'+p+'" alt="异步" loading="lazy" decoding="async"></p><p>使用异步的方式，<strong>渲染主线程永不阻塞</strong></p><h3 id="如何理解-js-的异步" tabindex="-1">如何理解 JS 的异步？ <a class="header-anchor" href="#如何理解-js-的异步" aria-label="Permalink to &quot;如何理解 JS 的异步？&quot;">​</a></h3><p><strong>单线程是异步产生的原因，事件循环是异步的实现方式</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。而渲染主线程承担着诸多的工作，解析 HTML、解析 CSS、执行 JS、渲染页面等等都在其中运行。</p><p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程会将任务交给其他线程去处理，自身立即结束该任务的执行，转而去执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p></div><h3 id="js-为何会阻塞渲染" tabindex="-1">JS 为何会阻塞渲染？ <a class="header-anchor" href="#js-为何会阻塞渲染" aria-label="Permalink to &quot;JS 为何会阻塞渲染？&quot;">​</a></h3>',37),o=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"JS阻塞渲染",src:"https://codepen.io/welives/embed/LYMZLmv?default-tab=js%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/welives/pen/LYMZLmv">
  JS阻塞渲染</a> by Jandan (<a href="https://codepen.io/welives">@welives</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),k=s('<h3 id="任务有优先级吗" tabindex="-1">任务有优先级吗？ <a class="header-anchor" href="#任务有优先级吗" aria-label="Permalink to &quot;任务有优先级吗？&quot;">​</a></h3><p>任务没有优先级，在消息队列中先进先出</p><p>但是<strong>消息队列是有优先级的</strong></p><p>根据 W3C 的最新解释：</p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属不同的队列。<br> 在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li><a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" target="_blank" rel="noreferrer">浏览器必须准备好一个微队列，微队列中的任务具有最高优先级</a></li></ul><div class="info custom-block"><p class="custom-block-title">在过去，消息队列简单的划分为「<strong>宏队列</strong>」和「<strong>微队列</strong>」</p><ul><li><strong>宏队列</strong>：用来保存待执行的宏任务(回调)，比如：<code>setTimeout</code>回调、<code>DOM</code>事件回调、<code>ajax</code>回调</li><li><strong>微队列</strong>：用于存放需要最快执行的任务，比如：<code>Promise</code>的<code>then</code>回调、<code>MutationObserver</code>回调</li></ul></div><p>但随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p><div class="tip custom-block"><p class="custom-block-title">目前，在最新的 Chrome 实现中，至少包含了下面的队列：</p><ul><li><strong>延时队列</strong>：用于存放计时器到达后的回调任务，优先级「<strong>中</strong>」。比如：<code>setTimeout</code>回调</li><li><strong>交互队列</strong>：用于存放用户操作后产生的事件处理任务，优先级「<strong>高</strong>」。比如：<code>DOM</code>事件回调</li><li><strong>微队列</strong>：用于存放需要最快执行的任务，优先级「<strong>最高</strong>」。比如：<code>Promise</code>的<code>then</code>回调、<code>MutationObserver</code>回调</li></ul></div><p>浏览器还有很多其他的队列，但是跟前端开发关系不大，所以不必深究</p><blockquote><p>添加任务到微队列的主要方式是使用<code>Promise</code>、<code>MutationObserver</code>。比如立即把一个函数添加到微队列<code>Promise.resolve().then(function(){})</code></p></blockquote><h3 id="阐述一下-js-的事件循环" tabindex="-1">阐述一下 JS 的事件循环 <a class="header-anchor" href="#阐述一下-js-的事件循环" aria-label="Permalink to &quot;阐述一下 JS 的事件循环&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">事件循环</p><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>由于 JS 代码是运行在渲染主线程当中的，而渲染主线程「<strong>有且只有一个</strong>」，这就会出现同一时间只能执行一段代码的问题，这个就是 JS 单线程的本质原因。</p><p>为了解决这个问题，浏览器采取的方案是「<strong>异步</strong>」，而「<strong>事件循环</strong>」则是异步的实现方式。 在 Chrome 的源码中，它会开启一个<code>for</code>无限循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时机将任务加入到队列的末尾即可。</p><p>过去曾把消息队列简单分为「<strong>宏队列</strong>」和「<strong>微队列</strong>」，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同的任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列中的任务。但浏览器必须有一个微队列，<strong>微队列的任务一定具有最高的优先级，必须优先调度执行</strong>。</p></div><h3 id="js-中的计时器能做到精确计时吗-为什么" tabindex="-1">JS 中的计时器能做到精确计时吗？为什么？ <a class="header-anchor" href="#js-中的计时器能做到精确计时吗-为什么" aria-label="Permalink to &quot;JS 中的计时器能做到精确计时吗？为什么？&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">不能</p><ol><li>计算机硬件不是原子钟，无法做到精确计时。</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差。</li><li><a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers" target="_blank" rel="noreferrer">按照 W3C 的标准</a>，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差。</li><li>受事件循环的影响，计时器的回调函数只能在渲染主线程空闲时运行，因此又带来了偏差</li></ol></div>',14),d=[h,o,k];function c(g,E,b,m,u,y){return a(),n("div",null,d)}const f=i(r,[["render",c]]);export{F as __pageData,f as default};
