import{_ as o,o as d,c as a,R as t,k as e,a as i}from"./chunks/framework.0ARc0mp4.js";const y=JSON.parse('{"title":"一些Demo","description":"一些前端Demo","frontmatter":{"title":"一些Demo","head":[["meta",{"name":"description","content":"一些前端Demo"}],["meta",{"name":"keywords","content":"css js 前端 demo"}]]},"headers":[],"relativePath":"front-end/demo/index.md","filePath":"front-end/demo/index.md","lastUpdated":1714164872000}'),l={name:"front-end/demo/index.md"},s=t('<h2 id="瀑布流" tabindex="-1">瀑布流 <a class="header-anchor" href="#瀑布流" aria-label="Permalink to &quot;瀑布流&quot;">​</a></h2><p>使用<code>grid</code>实现</p><ol><li>通过<code>grid-auto-rows</code>属性设置<code>grid</code>元素的基准行高</li><li>设置<code>grid</code>元素的<code>align-items</code>属性值为<code>start</code>，目的是取消其自动拉伸行为</li><li>设置<code>grid</code>的每一行自动填充，<code>grid-template-columns: repeat(auto-fill, calc(50% - 5px))</code></li><li>接着动态获取每个<code>grid</code>元素的<code>clientHeight</code>，让其除以基准行高并向上取整后加上一个间隔距离值：<code>const girdHeight = Math.ceil(height / 5) + 2</code></li><li>最后将计算好的<code>grid</code>元素实际高度赋值给<code>grid-row-end</code>属性即可</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">itemList[i].style.gridRowEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `span ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">girdHeight</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>我的这个例子是用原生 JS 写的，对于 <code>Vue</code>和<code>React</code>，可以根据这个思路，将<code>grid</code>元素封装成子组件，在子组件挂载阶段获取元素的<code>clientHeight</code>并计算出实际的<code>grid</code>元素高度即可</p></blockquote>',5),r=e("iframe",{src:"/blog/demo/waterfall/grid.html",title:"Grid实现瀑布流",height:"300",width:"100%",scrolling:"auto",frameborder:"0"},null,-1),c=t('<h2 id="滚动歌词" tabindex="-1">滚动歌词 <a class="header-anchor" href="#滚动歌词" aria-label="Permalink to &quot;滚动歌词&quot;">​</a></h2><p>因为歌词文件的文本格式通常都是一段歌词正文和时间轴组合而成的，所以大致的实现思路可以分为以下步骤</p><ol><li>通过接口获取到歌词文本内容</li><li>解析歌词得到一个数组对象，每个对象至少要包含有时间轴信息和歌词正文信息</li><li>预先设定好的每句歌词的行高和歌词列表容器的高度</li><li>根据解析好的歌词数组对象动态创建一个列表</li><li>监听播放器的<code>timeupdate</code>事件得到当前歌词的数组下标，然后计算出偏移量</li></ol>',3),n=e("iframe",{src:"/blog/demo/滚动歌词/index.html",title:"滚动歌词",height:"300",width:"100%",scrolling:"auto",frameborder:"0"},null,-1),h=e("h2",{id:"购物车动画",tabindex:"-1"},[i("购物车动画 "),e("a",{class:"header-anchor",href:"#购物车动画","aria-label":'Permalink to "购物车动画"'},"​")],-1),p=e("iframe",{src:"/blog/demo/购物车动画/index.html",title:"购物车动画",height:"500",width:"350",scrolling:"no",frameborder:"0"},null,-1),m=e("h2",{id:"高度自动的过渡效果",tabindex:"-1"},[i("高度自动的过渡效果 "),e("a",{class:"header-anchor",href:"#高度自动的过渡效果","aria-label":'Permalink to "高度自动的过渡效果"'},"​")],-1),_=e("iframe",{src:"/blog/demo/高度自动的过渡/index.html",title:"高度自动的过渡效果",height:"400",width:"100%",scrolling:"auto",frameborder:"0"},null,-1),g=e("h2",{id:"ripple波纹按钮",tabindex:"-1"},[i("Ripple波纹按钮 "),e("a",{class:"header-anchor",href:"#ripple波纹按钮","aria-label":'Permalink to "Ripple波纹按钮"'},"​")],-1),u=e("iframe",{src:"/blog/demo/ripple-effect/index.html",title:"波纹按钮",height:"200",width:"100%",scrolling:"auto",frameborder:"0"},null,-1),b=[s,r,c,n,h,p,m,_,g,u];function f(k,x,E,T,w,P){return d(),a("div",null,b)}const S=o(l,[["render",f]]);export{y as __pageData,S as default};
