import{_ as s,o as a,c as i,R as e}from"./chunks/framework.0ARc0mp4.js";const n="/blog/assets/personal-repository.plaQF1Ek.png",t="/blog/assets/wakatime-plugin.DAQt34rh.png",l="/blog/assets/wakatime-api-key-setup-1.qX1ApbDY.png",p="/blog/assets/wakatime-api-key-setup-2.FzPYFRm-.png",r="/blog/assets/github-developer-settings.nwXXPasX.png",h="/blog/assets/github-access-token.pphmxQgU.png",o="/blog/assets/generate-access-token.UrgPUvad.png",d="/blog/assets/github-access-token-result.wJIu7xf0.png",c="/blog/assets/github-remote-edit.DMUBSi2B.png",k="/blog/assets/exec-actions.5R3kDaMf.png",g="/blog/assets/beauty-github-profile.8vP-KU_O.png",G=JSON.parse('{"title":"使用GitHub-Readme-Stats美化Github个人主页","description":"使用GitHub-Readme-Stats美化Github个人主页","frontmatter":{"title":"使用GitHub-Readme-Stats美化Github个人主页","head":[["meta",{"name":"description","content":"使用GitHub-Readme-Stats美化Github个人主页"}],["meta",{"name":"keywords","content":"github 美化 GithubActions GitHub-Readme-Stats wakatime"}]]},"headers":[],"relativePath":"misc/github/profile.md","filePath":"misc/github/profile.md","lastUpdated":1711386344000}'),m={name:"misc/github/profile.md"},b=e('<div class="tip custom-block"><p class="custom-block-title">✨</p><p>本文将介绍使用<code>GitHub-Readme-Stats</code>结合<code>WakaTime</code>来美化<code>Github</code>个人主页</p></div><h2 id="相关文档" tabindex="-1">相关文档 <a class="header-anchor" href="#相关文档" aria-label="Permalink to &quot;相关文档&quot;">​</a></h2><ul><li><a href="https://github.com/anuraghazra/github-readme-stats/tree/master" target="_blank" rel="noreferrer">GitHub-Readme-Stats</a></li><li><a href="https://wakatime.com/" target="_blank" rel="noreferrer">WakaTime</a></li></ul><h2 id="创建个人仓库" tabindex="-1">创建个人仓库 <a class="header-anchor" href="#创建个人仓库" aria-label="Permalink to &quot;创建个人仓库&quot;">​</a></h2><p>每个人的<code>Github</code>账号下都有一个特殊仓库，就是和你的账号同名的那个仓库，它可以用来展示你的<code>Github</code>个人统计信息，你平时看到有些人的<code>Github</code>主页很酷炫就是通过这个仓库实现的</p><p><img src="'+n+'" alt="" loading="lazy" decoding="async"></p><h2 id="注册wakatime" tabindex="-1">注册WakaTime <a class="header-anchor" href="#注册wakatime" aria-label="Permalink to &quot;注册WakaTime&quot;">​</a></h2><p>访问 <a href="https://wakatime.com/" target="_blank" rel="noreferrer">WakaTime</a> 官网，注册并登录，然后为你常用的 IDE 安装<code>WakaTime</code>插件，我这里以 VSCode 为例。</p><p>在浏览器中打开<code>WakaTime</code>的账户设置页面，找到 <code>Secret API Key</code>，然后复制它填入 VSCode 的 <code>WakaTime</code>插件</p><p><img src="'+t+'" alt="" loading="lazy" decoding="async"></p><h3 id="个人仓库配置wakatime-api-key" tabindex="-1">个人仓库配置WakaTime API Key <a class="header-anchor" href="#个人仓库配置wakatime-api-key" aria-label="Permalink to &quot;个人仓库配置WakaTime API Key&quot;">​</a></h3><p>打开你的个人仓库设置页面</p><p><img src="'+l+'" alt="" loading="lazy" decoding="async"></p><p>填入你的 WakaTime API Key</p><p><img src="'+p+'" alt="" loading="lazy" decoding="async"></p><h2 id="生成github访问令牌" tabindex="-1">生成Github访问令牌 <a class="header-anchor" href="#生成github访问令牌" aria-label="Permalink to &quot;生成Github访问令牌&quot;">​</a></h2><p>进入你的<code>Github</code>个人设置页面，在左侧栏最底部找到<code>Developer settings</code></p><p><img src="'+r+'" alt="" loading="lazy" decoding="async"></p><p>接着选中<code>Tokens(classic)</code></p><p><img src="'+h+'" alt="" loading="lazy" decoding="async"></p><p>生成一个访问令牌，记得勾选<code>repo</code>和<code>user</code>权限，并设置令牌过期时间(建议&gt;30天)</p><p><img src="'+o+'" alt="" loading="lazy" decoding="async"></p><p>好了，令牌创建成功，把它复制下来备用</p><p><img src="'+d+'" alt="" loading="lazy" decoding="async"></p><h3 id="使用令牌" tabindex="-1">使用令牌 <a class="header-anchor" href="#使用令牌" aria-label="Permalink to &quot;使用令牌&quot;">​</a></h3><p>打开你的个人仓库，跟上面配置<code>WakaTime API Key</code>时同样的地方，再创建一个仓库密钥<code>GH_ACCESS_TOKEN</code>，这回填入的是刚才生成的<code>Github</code>访问令牌</p><h2 id="配置工作流" tabindex="-1">配置工作流 <a class="header-anchor" href="#配置工作流" aria-label="Permalink to &quot;配置工作流&quot;">​</a></h2><p>进入个人仓库主页，复制仓库的<code>git</code>地址，然后利用 VSCode <a href="https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub" target="_blank" rel="noreferrer">远程仓库插件</a>直接对仓库文件进行编辑</p><p><img src="'+c+`" alt="" loading="lazy" decoding="async"></p><p>编辑<code>README.md</code>，在合适的位置插入以下代码，注意要把<code>username</code>替换成你的<code>Github</code>用户名</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">![Anurag&#39;s GitHub stats](https://github-readme-stats.vercel.app/api?username=welives)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">https://github.com/anuraghazra/github-readme-stats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--START_SECTION:waka--&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--END_SECTION:waka--&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>根目录新建<code>.github/workflows/WakaTime.yml</code>，添加如下代码</p><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Waka Readme</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Runs at 12am IST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;30 18 * * *&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workflow_dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  update-readme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Update Readme with Metrics</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">anmol098/waka-readme-stats@master</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          WAKATIME_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.WAKATIME_API_KEY }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          GH_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.GH_ACCESS_TOKEN }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>编辑完毕后提交代码</p><h2 id="执行工作流" tabindex="-1">执行工作流 <a class="header-anchor" href="#执行工作流" aria-label="Permalink to &quot;执行工作流&quot;">​</a></h2><p>打开个人仓库，选中<code>Actions</code>，如下图所示按下<code>Run Workflow</code>执行工作流</p><p><img src="`+k+'" alt="" loading="lazy" decoding="async"></p><p>当工作流成功执行完毕后，刷新个人主页，就可以看到酷炫的<code>Github</code>个人统计信息了</p><p><img src="'+g+'" alt="" loading="lazy" decoding="async"></p>',39),u=[b];function E(y,_,A,f,D,T){return a(),i("div",null,u)}const w=s(m,[["render",E]]);export{G as __pageData,w as default};
