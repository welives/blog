import{_ as s,o as i,c as a,R as e}from"./chunks/framework.0ARc0mp4.js";const n="/blog/assets/simple_container.yEQLGjIt.png",l="/blog/assets/simple_container_dev.uMGOIRhL.png",m=JSON.parse('{"title":"Docker搭建远程开发环境","description":"Docker搭建远程开发环境","frontmatter":{"title":"Docker搭建远程开发环境","head":[["meta",{"name":"description","content":"Docker搭建远程开发环境"}],["meta",{"name":"keywords","content":"docker remote 容器 镜像 远程开发"}]]},"headers":[],"relativePath":"devops/docker/remote-dev.md","filePath":"devops/docker/remote-dev.md","lastUpdated":1715270350000}'),p={name:"devops/docker/remote-dev.md"},t=e('<h2 id="docker搭建远程开发环境" tabindex="-1">Docker搭建远程开发环境 <a class="header-anchor" href="#docker搭建远程开发环境" aria-label="Permalink to &quot;Docker搭建远程开发环境&quot;">​</a></h2><blockquote><p>如果在 Windows 上还没搭建好基础的 docker 运行环境的话，去这里看：<a href="/blog/misc/win10-dev-environment.html#enable-wsl">启用 Windows 的 WSL 功能</a>和<a href="/blog/misc/win10-dev-environment.html#install-docker">安装 Docker</a></p></blockquote><p>今夕是何年，你还在 Windows 环境上做本地开发？ 以后的趋势是在 docker 上进行远程开发了，因为这样可以统一项目中所有人员的开发环境</p><p>在前端开发环境中，我们需要全局安装的软件至少有<code>node、git、typescript、@vue/cli或者create-react-app</code></p><h2 id="先来个简单的" tabindex="-1">先来个简单的 <a class="header-anchor" href="#先来个简单的" aria-label="Permalink to &quot;先来个简单的&quot;">​</a></h2><p>比如我已经在宿主机的<code>D:/Workspace/demo</code>目录下使用<code>create-react-app</code>创建了一个干净的项目，这时我想在 docker 容器中开发这个项目</p><ol><li>首先执行<code>docker pull node:lts</code>下载一个 node 环境镜像</li><li>接着使用这个 node 镜像启动一个容器，并且将宿主机的<code>D:/Workspace/demo</code>目录映射到容器中的<code>/app</code>目录</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WATCHPACK_POLLING=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> D:/Workspace/demo:/app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:lts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面这个命令的参数说明</p><ul><li><code>-dit</code>：后台运行且分配一个命令行交互终端</li><li><code>-p</code>：端口映射</li><li><code>-e</code>：设置环境变量，我这里是让 docker 容器中的项目支持热更新，如果是 React 18 之前的项目则为<code>-e CHOKIDAR_USEPOLLING=true</code></li><li><code>--name</code>：指定容器名称</li><li><code>-v</code>：将宿主机的目录挂载到容器中</li><li><code>node</code>：以 node 镜像为基础启动容器</li></ul><p>上面的命令执行成功后，可以在<code>Docker Desktop</code>中查看该容器的相关信息，可以看到宿主机的项目目录已经成功挂载到容器中</p><p><img src="'+n+'" alt="" loading="lazy" decoding="async"></p><ol start="3"><li>打开 VSCode 先点击左下角，然后再弹出的对话框中选择<code>附加到正在运行的容器</code>，选择对应的容器(我这里是<code>react-demo</code>)</li></ol><p><img src="'+l+`" alt="" loading="lazy" decoding="async"></p><ol start="4"><li>在 VSCode 中打开命令行终端，输入<code>cd /app</code>进入到容器中的开发目录，执行<code>npm install</code>安装依赖，最后<code>npm run start</code>就可以愉快的开发了</li></ol><h2 id="制作项目所需的开发环境镜像" tabindex="-1">制作项目所需的开发环境镜像 <a class="header-anchor" href="#制作项目所需的开发环境镜像" aria-label="Permalink to &quot;制作项目所需的开发环境镜像&quot;">​</a></h2><ol><li>还是在宿主机的<code>D:/Workspace/demo</code>目录下，在目录创建一个<code>Dockerfile</code>文件，内容如下：</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以node镜像作为基础</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:lts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/apt/lists/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装一些全局依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> live-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npmmirror.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="2"><li>构建镜像<code>docker image build -t my-node .</code>，然后运行容器<code>docker run -dit -p 5173:5173 --name vue-demo -v &quot;\${PWD}&quot;:/app my-node /bin/bash</code></li></ol><blockquote><p>这里的<code>PWD</code>表示当前宿主机的终端所处的目录</p></blockquote><ol start="3"><li>接着用 VSCode 进入容器开发环境，在<code>/app</code>目录下安装 Vue 项目(<em>宿主机挂载的目录会自动同步文件</em>)，安装完成后修改一下<code>vite.config</code>，添加以下配置</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许宿主机访问容器内的地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  hmr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 开启热更新</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePolling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="4"><li>最后<code>npm run dev</code>就能愉快的在容器中进行开发了</li></ol><h2 id="真正的远程开发环境" tabindex="-1">真正的远程开发环境 <a class="header-anchor" href="#真正的远程开发环境" aria-label="Permalink to &quot;真正的远程开发环境&quot;">​</a></h2><p>上面两个都是开胃菜，只是在 Windows 中拿 docker 来模拟 Linux 环境而已，接下来通过 SSH 的方式连接远端服务器的 docker 容器</p><p>这次我将用一个 ubuntu 镜像作为基础开发环境镜像</p><ol><li>首先在远端服务器上<code>docker pull ubuntu</code>拉取镜像</li><li>然后运行它<code>docker run -dit -p 2233:22 --name fed ubuntu /bin/bash</code></li><li>启动成功后进入容器<code>docker exec -it fed /bin/bash</code></li><li>先更新一下包管理器<code>apt-get update</code>，然后安装一些基础软件<code>apt-get install -y git vim curl wget xz-utils openssh-server</code></li><li>输入<code>passwd</code>设置 SSH 登录密码</li><li>修改 ssh 配置文件<code>vim /etc/ssh/sshd_config</code>，将<code>port</code>设置为<code>22</code>，<code>PermitRootLogin</code>改为<code>yes</code></li><li>给 ssh 设置开机自启服务<code>echo &quot;service ssh start&quot; &gt;&gt; ~/.bashrc</code>，然后重载<code>source ~/.bashrc</code></li><li>在<code>/home/</code>下面创建<code>projects</code>和<code>packages</code>目录，分别用来做项目的工作空间和存放软件包</li><li>使用<code>wget</code>下载 node 并安装到<code>packages</code>目录，注意要下载二进制格式的安装包</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载二进制node安装包,根据自己情况选择版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://nodejs.org/dist/v18.18.0/node-v18.18.0-linux-x64.tar.xz</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 解压</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-v18.18.0-linux-x64.tar.xz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/packages</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重命名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/packages/node-v18.18.0-linux-x64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/packages/node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除安装包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-v18.18.0-linux-x64.tar.xz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="10"><li>配置 node 环境变量</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加入系统环境变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;export PATH=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/home/packages/node/bin&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重载配置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="11"><li>安装一些常用的全局软件包</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> live-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npmmirror.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="12"><li><p>打开 VSCode 通过 SSH 连接此<code>fed</code>容器，然后根据喜好给容器安装一些常用的 VSCode 插件(<em>此步可以不做</em>)</p></li><li><p>为了复用这个将调整好的<code>fed</code>容器，我们需要将它打包成镜像，然后推送到 Docker Hub</p></li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># commit [容器名称] [镜像名称]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打tag版本,并加上用户名做命名空间，防止与公共镜像冲突</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jandan/fed:1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 推送镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jandan/fed:1.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="14"><li>将刚才所有关于<code>fed</code>的镜像和容器删除，然后从 Docker Hub 中拉取刚刚推送的镜像<code>docker pull jandan/fed:1.0</code></li><li>在远端服务器上规划一个目录用来保存项目代码，比如我的是<code>/home/projects</code></li><li>启动容器，并挂载项目目录<code>docker run -dit -p 2233:22 -p 3100:3100 -v &quot;\${PWD}&quot;:/home/projects/koa --name koa-dev jandan/fed:1.0 /bin/bash</code></li></ol><div class="warning custom-block"><p class="custom-block-title">说明</p><p>我这里是在远程容器中进行 koa 的开发，koa 的端口运行在<code>3100</code>，如果要查看运行效果的话，访问<code>&lt;远端服务器ip&gt;:3100</code>即可</p></div>`,36),h=[t];function d(k,r,o,c,F,g){return i(),a("div",null,h)}const y=s(p,[["render",d]]);export{m as __pageData,y as default};
