import{_ as e,o,c as a,R as t,k as d}from"./chunks/framework.0ARc0mp4.js";const c="/blog/assets/渲染时间点.nftK9rUc.png",r="/blog/assets/渲染流水线.g5LnBr3R.png",n="/blog/assets/解析CSS.YxZoPfal.png",l="/blog/assets/执行JS.qQyNb7lc.png",s="/blog/assets/解析HTML.MQnUXKvG.png",i="/blog/assets/DOM树和布局树是不同的.Qs3dNQYs.png",p="/blog/assets/完成绘制.3E_r1aBm.png",h="/blog/assets/光栅化.RCBo8J9V.png",g="/blog/assets/画.DkZTOKU2.png",m="/blog/assets/完整过程.104NaR9p.png",f="/blog/assets/重排.3TM-16HQ.png",_="/blog/assets/重绘.me3JmI-0.png",u="/blog/assets/transform_1.9zKXuIlS.png",b="/blog/assets/transform_2.mv6K-6xm.png",z=JSON.parse('{"title":"浏览器渲染原理","description":"浏览器渲染原理","frontmatter":{"title":"浏览器渲染原理","head":[["meta",{"name":"description","content":"浏览器渲染原理"}],["meta",{"name":"keywords","content":"渲染原理 渲染流程 渲染主线程 reflow repain 重排 重绘"}]]},"headers":[],"relativePath":"front-end/browser/rendering.md","filePath":"front-end/browser/rendering.md","lastUpdated":1715270350000}'),y={name:"front-end/browser/rendering.md"},S=t('<h2 id="浏览器是如何渲染页面的" tabindex="-1">浏览器是如何渲染页面的？ <a class="header-anchor" href="#浏览器是如何渲染页面的" aria-label="Permalink to &quot;浏览器是如何渲染页面的？&quot;">​</a></h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><p><img src="'+c+'" alt="渲染时间点" loading="lazy" decoding="async"></p><h3 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h3><p>整个渲染流程分为多个阶段，分别是：HTML 解析、样式解析、布局、分层、绘制、分块、光栅化、画</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><p><img src="'+r+'" alt="渲染流水线" loading="lazy" decoding="async"></p><h4 id="_1解析html" tabindex="-1">①解析HTML <a class="header-anchor" href="#_1解析html" aria-label="Permalink to &quot;①解析HTML&quot;">​</a></h4><p>解析过程中遇到 CSS 则解析 CSS，遇到 JS 则执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和外部 JS 文件。</p><p>如果主线程解析到<code>link</code>标签，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p><p><img src="'+n+'" alt="解析 CSS" loading="lazy" decoding="async"></p><p>如果主线程解析到<code>script</code>标签，会暂停解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p><p><img src="'+l+'" alt="执行 JS" loading="lazy" decoding="async"></p><p>在第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p><p><img src="'+s+'" alt="解析 HTML" loading="lazy" decoding="async"></p><h4 id="_2样式计算" tabindex="-1">②样式计算 <a class="header-anchor" href="#_2样式计算" aria-label="Permalink to &quot;②样式计算&quot;">​</a></h4><p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为<code>Computed Style</code></p><p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rga(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code></p><p>这一步完成后，会得到一棵带有样式的 DOM 树</p><h4 id="_3布局" tabindex="-1">③布局 <a class="header-anchor" href="#_3布局" aria-label="Permalink to &quot;③布局&quot;">​</a></h4><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p><p>大部分时候，DOM 树和布局树并非一一对应</p><p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应</p><p><img src="'+i+'" alt="DOM 树和布局树是不同的" loading="lazy" decoding="async"></p><h4 id="_4分层" tabindex="-1">④分层 <a class="header-anchor" href="#_4分层" aria-label="Permalink to &quot;④分层&quot;">​</a></h4><p>主线程会使用一套复杂的策略对整个布局树进行分层</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率</p><p>滚动条、堆叠上下文、<code>transform</code>、<code>opacity</code>等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果</p><h4 id="_5绘制" tabindex="-1">⑤绘制 <a class="header-anchor" href="#_5绘制" aria-label="Permalink to &quot;⑤绘制&quot;">​</a></h4><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来，渲染主线程的工作到此为止，剩余步骤交给其他线程来完成</p><p><img src="'+p+'" alt="完成绘制" loading="lazy" decoding="async"></p><h4 id="_6分块" tabindex="-1">⑥分块 <a class="header-anchor" href="#_6分块" aria-label="Permalink to &quot;⑥分块&quot;">​</a></h4><p>完成绘制后，下一步是<strong>分块</strong>，主线程将每个图层的绘制信息提交给<strong>合成线程</strong>，剩余工作将由合成线程来完成</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域</p><p>它会从线程池中拿取多个线程来完成分块工作</p><h4 id="_7光栅化" tabindex="-1">⑦光栅化 <a class="header-anchor" href="#_7光栅化" aria-label="Permalink to &quot;⑦光栅化&quot;">​</a></h4><p>分块完成后，进入<strong>光栅化</strong>阶段</p><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块</p><p>光栅化的结果，就是一块一块的位图</p><p><img src="'+h+'" alt="光栅化" loading="lazy" decoding="async"></p><h4 id="_8画" tabindex="-1">⑧画 <a class="header-anchor" href="#_8画" aria-label="Permalink to &quot;⑧画&quot;">​</a></h4><p>最后一个阶段就是<strong>画</strong>了</p><p>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形</p><p>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因</p><p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像</p><p><img src="'+g+'" alt="画" loading="lazy" decoding="async"></p><h3 id="完整过程" tabindex="-1">完整过程 <a class="header-anchor" href="#完整过程" aria-label="Permalink to &quot;完整过程&quot;">​</a></h3><p><img src="'+m+'" alt="完整过程" loading="lazy" decoding="async"></p><h2 id="什么是reflow" tabindex="-1">什么是<code>reflow</code>？ <a class="header-anchor" href="#什么是reflow" aria-label="Permalink to &quot;什么是`reflow`？&quot;">​</a></h2><p><code>reflow</code>的本质就是重新计算「布局树」</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 <code>layout</code></p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的<code>reflow</code>是异步完成的</p><p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息</p><p>浏览器在反复权衡下，最终决定获取属性立即<code>reflow</code></p><p><img src="'+f+'" alt="重排" loading="lazy" decoding="async"></p><h2 id="如何避免不必要的reflow" tabindex="-1">如何避免不必要的<code>reflow</code> <a class="header-anchor" href="#如何避免不必要的reflow" aria-label="Permalink to &quot;如何避免不必要的`reflow`&quot;">​</a></h2><ul><li>样式表越简单、重排和重绘就越快</li><li>重排和重绘的 DOM 元素层级越高，成本越高</li><li>table 元素重排和重绘的成本要高于 div</li><li>统一改样式</li><li>尽量不要将读取和写入的操作放在同一条语句里面</li><li>缓存重排结果</li><li>虚拟 DOM React</li><li><code>display:none</code>不会影响重排重绘</li><li><code>visibility</code>影响重排不影响重绘</li></ul><h2 id="什么是repaint" tabindex="-1">什么是<code>repaint</code>？ <a class="header-anchor" href="#什么是repaint" aria-label="Permalink to &quot;什么是`repaint`？&quot;">​</a></h2><p><code>repaint</code>的本质就是重新根据分层信息计算了绘制指令</p><p>当改动了可见样式后，就需要重新计算，会引发<code>repaint</code></p><p>由于元素的布局信息也属于可见样式，所以<code>reflow</code>一定会引起<code>repaint</code></p><p><img src="'+_+'" alt="重绘" loading="lazy" decoding="async"></p><h2 id="为什么transform的效率高" tabindex="-1">为什么<code>transform</code>的效率高？ <a class="header-anchor" href="#为什么transform的效率高" aria-label="Permalink to &quot;为什么`transform`的效率高？&quot;">​</a></h2><p>因为<code>transform</code>既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「<strong>Draw</strong>」阶段</p><p>由于<code>draw</code>阶段在合成线程中，所以<code>transform</code>的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响<code>transform</code>的变化</p><h3 id="有很多属性和方法会触发layout" tabindex="-1">有很多属性和方法会触发<code>layout</code> <a class="header-anchor" href="#有很多属性和方法会触发layout" aria-label="Permalink to &quot;有很多属性和方法会触发`layout`&quot;">​</a></h3><p><code>clientHeight</code>、<code>clientleft</code>、<code>clientTop</code>、<code>clientWidth</code>、<code>focus()</code>、<code>getBoundingClientRect()</code> <code>getClientRects()</code>、<code>innerText</code>、<code>offsetHeight</code>、<code>offsetLeft</code>、<code>offsetParent</code>、<code>offsetTop</code>、<code>offsetWidth</code>、<code>outerText</code>、<code>scrollBylines()</code>、<code>scrollBypages()</code>、<code>scrollHeight()</code>、<code>scrollIntoViev()</code>、<code>scrollIntoVievNeeded()</code>、<code>scrollLeft</code>、<code>scrollTop</code>、<code>scrollWidth</code>......</p><p><strong>提高动画性能，则尽量不触发<code>layout</code>，使用<code>transform</code>，读取以上属性不会触发<code>layout</code>、只有更改的时候才会触发</strong></p><p><img src="'+u+'" alt="transform1" loading="lazy" decoding="async"></p><p><img src="'+b+'" alt="transform2" loading="lazy" decoding="async"></p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3>',75),q=d("iframe",{height:"450",style:{width:"100%"},scrolling:"no",title:"transform 高效的原因",src:"https://codepen.io/welives/embed/RwERgYP?default-tab=css%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/welives/pen/RwERgYP">
  transform 高效的原因</a> by Jandan (<a href="https://codepen.io/welives">@welives</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),P=[S,q];function w(M,x,T,k,C,D){return o(),a("div",null,P)}const H=e(y,[["render",w]]);export{z as __pageData,H as default};
